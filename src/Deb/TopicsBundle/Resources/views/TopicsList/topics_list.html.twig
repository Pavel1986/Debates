{% extends '::debates/base.html.twig' %}

{% block stylesheets %}
    {{ parent() }}

    <link href="{{ asset('bundles/deb/css/topics-list.css') }}" rel="stylesheet" />
    <style>
        .custom-combobox {
            position: relative;
            display: inline-block;
            padding-right: 50px;
        }
        .custom-combobox-input {
            margin: 0;
            padding: 0.3em;
        }
    </style>
{% endblock %}

{% block javascripts %}
    {{ parent() }}

    <script src="http://{{ host }}:8080/socket.io/socket.io.js"></script>
    <script>
       /* var socket = io.connect('http://{{ host }}:8080');       */
        
        (function( $ ) {
            $.widget( "custom.combobox", {
              _create: function() {
                this.wrapper = $( "<span>" )
                  .addClass( "custom-combobox" )
                  .insertAfter( this.element );

                this.element.hide();
                this._createAutocomplete();
                this._createShowAllButton();
              },

              _createAutocomplete: function() {
                var selected = this.element.children( ":selected" ),
                  value = selected.val() ? selected.text() : "";

                this.input = $( "<input>" )
                  .appendTo( this.wrapper )
                  .val( value )
                  .attr( "title", "" )
                  .addClass( "custom-combobox-input ui-widget ui-widget-content ui-state-default ui-corner-left" )
                  .autocomplete({
                    delay: 0,
                    minLength: 0,
                    source: $.proxy( this, "_source" )
                  })
                  .tooltip({
                    tooltipClass: "ui-state-highlight"
                  });

                this._on( this.input, {
                  autocompleteselect: function( event, ui ) {
                    ui.item.option.selected = true;
                    this._trigger( "select", event, {
                      item: ui.item.option
                    });
                  },

                  autocompletechange: "_removeIfInvalid"
                });
              },

              _createShowAllButton: function() {
                var input = this.input,
                  wasOpen = false;

                $( "<a>" )
                  .attr( "tabIndex", -1 )
                  .attr( "title", "Show All Items" )
                  .tooltip()
                  .appendTo( this.wrapper )
                  .button({
                    icons: {
                      primary: "ui-icon-triangle-1-s"
                    },
                    text: false
                  })
                  .removeClass( "ui-corner-all" )
                  .addClass( "custom-combobox-toggle ui-corner-right" )
                  .mousedown(function() {
                    wasOpen = input.autocomplete( "widget" ).is( ":visible" );
                  })
                  .click(function() {
                    input.focus();

                    // Close if already visible
                    if ( wasOpen ) {
                      return;
                    }

                    // Pass empty string as value to search for, displaying all results
                    input.autocomplete( "search", "" );
                  });
              },

              _source: function( request, response ) {
                var matcher = new RegExp( $.ui.autocomplete.escapeRegex(request.term), "i" );
                response( this.element.children( "option" ).map(function() {
                  var text = $( this ).text();
                  if ( this.value && ( !request.term || matcher.test(text) ) )
                    return {
                      label: text,
                      value: text,
                      option: this
                    };
                }) );
              },

              _removeIfInvalid: function( event, ui ) {

                // Selected an item, nothing to do
                if ( ui.item ) {
                  return;
                }

                // Search for a match (case-insensitive)
                var value = this.input.val(),
                  valueLowerCase = value.toLowerCase(),
                  valid = false;
                this.element.children( "option" ).each(function() {
                  if ( $( this ).text().toLowerCase() === valueLowerCase ) {
                    this.selected = valid = true;
                    return false;
                  }
                });

                // Found a match, nothing to do
                if ( valid ) {
                  return;
                }

                // Remove invalid value
                this.input
                  .val( "" )
                  .attr( "title", value + " didn't match any item" )
                  .tooltip( "open" );
                this.element.val( "" );
                this._delay(function() {
                  this.input.tooltip( "close" ).attr( "title", "" );
                }, 2500 );
                this.input.autocomplete( "instance" ).term = "";
              },

              _destroy: function() {
                this.wrapper.remove();
                this.element.show();
              }
            });
          })( jQuery );
        
        $(function() {            
            $("#RefreshTopicsList").button({
                text: false,
                icons: {
                  primary: "ui-icon-refresh",
                  label: ""
                }
              });
            $("#CategoryList").combobox();
            $("#StatusList").selectmenu(); 
            $("#SortList").selectmenu();
            $("#CreateTopic").button();
          });
    </script>
{% endblock %}

{% block body %}
    
        <div id="TopicsFilter">

        <button id="RefreshTopicsList">Refresh topics list</button>

        Category :
        <select id="CategoryList">
            <option value="All">All</option>
            <option value="ActionScript">ActionScript</option>
            <option value="AppleScript">AppleScript</option>
            <option value="Asp">Asp</option>
            <option value="BASIC">BASIC</option>
            <option value="C">C</option>
            <option value="C++">C++</option>
            <option value="Clojure">Clojure</option>
            <option value="COBOL">COBOL</option>
            <option value="ColdFusion">ColdFusion</option>
        </select>

        Status :
        <select id="StatusList">
            <option value="All">All</option>
            <option value="Opened">Opened</option>
            <option value="Completed">Completed</option>
            <option value="Closed">Closed</option>
        </select>

        Sorting :
        <select id="SortList">
            <option value="Date">Date</option>
            <option value="popular">Most popular</option>
            <option value="commented">Most commented</option>
        </select>

        
        <button id="CreateTopic">Create topic</button>
        

    </div>
    <br />
    Current locale : {{ locale }}    
    <br />
    
    <div>
        {% for topic in topics %}
          
            <ul>
                <li>id : {{ topic.id }}</li>
                <li>name : {{ topic.name }}</li>
                <li>description : {{ topic.description }}</li>
            </ul>

    {% endfor %}        
    </div>
    
{% endblock %}